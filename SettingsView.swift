//
//  SettingsView.swift
//  Just Now
//
//  Created by Illya Bomash on 5/29/23.
//

import Foundation
import SwiftUI

struct SettingsView: View {
  @Environment(\.presentationMode)
  var presentationMode

  @ObservedObject var settings: JustNowSettings = JustNowSettings.shared

  var body: some View {
    NavigationView {
      Form {
        Section(header: Text("Health")) {
          Toggle(isOn: $settings.writeToHealth, label: { Text("Write sessions to Health") })
        }

        Section(header: Text("About")) {
          Text("Coded by Illya Bomash in 2023.")
          Text(
            "Enjoying it? Please offer dana to teachers whose teachings resonate with you, or to people trying to do well in your local community."
          )
        }

        Section(header: Text("Credits")) {
          Text("Bell sound downloaded from user fauxpress on freesound.org.")
          Text(
            "The prompt included on the main screen was heavily influenced by the teachings of Loch Kelly."
          )
          Text(
            "The initial app icon was generated by DALL-E. I would like to commission an artist for the final icon."
          )
          Text(
            "AI was used to help with coding. I enjoy coding but I've never worked with Swift or iOS before. ChatGPT and Github Copilot were both used to help put this together as a hobby project."
          )
        }
      }
      .navigationBarTitle("Settings")
      .navigationBarItems(
        trailing: Button(
          "Dismiss",
          action: {
            self.presentationMode.wrappedValue.dismiss()
          }))
    }
  }
}

class JustNowSettings: ObservableObject {
  static let shared = JustNowSettings()

  private let userDefaults = UserDefaults.standard

  var writeToHealth: Bool {
    get {
      return userDefaults.bool(forKey: "writeToHealth")
    }
    set {
      if newValue {
        HealthKitManager.shared.requestAuthorization { (success, error) in
          if !success {
            print("HealthKit permission denied: ", error?.localizedDescription ?? "Unknown error")
            return
          }
        }
      }
      userDefaults.set(newValue, forKey: "writeToHealth")
      userDefaults.synchronize()
    }
  }

  private init() {}
}

struct SettingsView_Previews: PreviewProvider {
  static var previews: some View {
    SettingsView()
  }
}
